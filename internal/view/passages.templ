package view

import (
    "fmt"
    "time"

	"main/internal/model"
)

templ passageListItem(model model.Passage, now time.Time) {
    <li class={
        "py-2 px-4 border-b border-slate-300",
        templ.KV("bg-green-300", !model.NextReview.IsZero() && now.Compare(model.NextReview) >= 0)
    }>
      <div class="flex items-center mb-1">
        <a
            class="flex-grow"
            href={templ.URL(fmt.Sprintf("/passages/%v/review", model.Id))}
        >
          {model.Reference.String()}
        </a>
        <a
            class="w-6 h-6 flex items-center justify-center"
            href={templ.URL(fmt.Sprintf("/passages/%v", model.Id))}
        >
          <span class="sr-only">Edit</span>
          @icon("pencil")
        </a>
        <button
            class="-mr-1 w-6 h-6 text-red-700 flex items-center justify-center"
            hx-delete={string(templ.URL(fmt.Sprintf("/passages/%v", model.Id)))}
            hx-target="closest li" hx-swap="outerHTML" hx-confirm={fmt.Sprintf("Are you sure you want to delete %v?", model.Reference.String())}
            title="Delete"
        >
          <span class="sr-only">Delete</span>
          @icon("trash")
        </button>
      </div>
      <div class="flex items-center">
        <span class="text-xs flex-grow">
          Review: 
          if model.NextReview.IsZero() {
              -
          } else {
              {model.NextReview.Format("01-02-2006")}
          }
        </span>
      </div>
    </li>
}

type PassagesViewModel struct {
    Passages []model.Passage
    Now time.Time
    View templ.Component
    StartOpen bool
}


templ PassagesView(model PassagesViewModel) {
    <div class="flex h-full relative">
      <button id="open-sidebar-button" type="button"
        class="sm:hidden border-slate-300 border-r w-8 font-bold flex flex-col items-center justify-start gap-1 focus:underline">
        <div class="text-vertical mt-4">
          Passages
        </div>
        @icon("angles-right")
      </button>
      <div id="sidebar"
        class={
            "absolute bg-white z-10 h-full w-11/12 max-w-80 min-w-64 border-r border-slate-300 flex-shrink-0 sm:w-1/3 sm:block sm:max-w-96 sm:static",
            templ.KV("hidden", model.StartOpen)
        }
      >
        <div class="flex border-b border-slate-300 py-2 px-4">
          <a class="flex-grow flex items-center gap-1" href="/passages/new">
            @icon("plus")
            Add Passage
          </a>
          <button id="close-sidebar-button" class="sm:hidden" title="Close">
            @icon("angles-left")
            <span class="sr-only">Close Sidebar</span>
          </button>
        </div>
        <ul id="passage-list">
            for _, passage := range model.Passages {
                @passageListItem(passage, model.Now)
            }
        </ul>
      </div>
      <main id="main" class="flex-grow relative">
        if model.View != nil {
            @model.View
        }
      </main>
    </div>
    <script type="text/javascript">
      {
        const openButton = document.querySelector('#open-sidebar-button')
        const closeButton = document.querySelector('#close-sidebar-button')
        const sidebar = document.querySelector('#sidebar')

        openButton.addEventListener('click', e => {
          sidebar.classList.remove('hidden')
        })
        closeButton.addEventListener('click', e => {
          sidebar.classList.add('hidden')
        })

        htmx.on('htmx:pushedIntoHistory', () => {
          sidebar.classList.add("hidden")
        })
      }
    </script>
}
