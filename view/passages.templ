package view

import "fmt"

type PassageListItemModel struct {
    Id int
    Reference string
    ReviewDue bool
    ReviewAt string
}

templ passageListItem(model PassageListItemModel) {
    <li class={
        "py-2 px-4 border-b border-slate-300",
        templ.KV("bg-green-300", model.ReviewDue)
    }>
      <div class="flex items-center mb-1">
        <a
            class="flex-grow"
            href={templ.URL(fmt.Sprintf("/passages/%v/review", model.Id))}
            hx-target="#main"
        >
          {model.Reference}
        </a>
        <a
            class="w-6 h-6 flex items-center justify-center"
            href={templ.URL(fmt.Sprintf("/passages/%v", model.Id))}
            hx-target="#main"
        >
          <span class="sr-only">Edit</span>
          <svg class="icon">
            <use href="/assets/icons.svg#pencil" />
          </svg>
        </a>
        <button
            class="-mr-1 w-6 h-6 text-red-700 flex items-center justify-center"
            hx-delete={string(templ.URL(fmt.Sprintf("/passages/%v", model.Id)))}
            hx-target="closest li" hx-swap="outerHTML" hx-confirm="Are you sure you want to delete {{.Reference}}?"
            title="Delete"
        >
          <span class="sr-only">Delete</span>
          <svg class="icon">
            <use href="/assets/icons.svg#trash" />
          </svg>
        </button>
      </div>
      <div class="flex items-center">
        <span class="text-xs flex-grow">
          Review: 
          if model.ReviewAt == "" {
              -
          } else {
              {model.ReviewAt}
          }
        </span>
      </div>
    </li>
}

type PassagesPageModel struct {
    Page interface{}
    Passages []PassageListItemModel
    StartOpen bool
}


templ PassagesPage(model PassagesPageModel) {
    <div class="flex h-full relative">
      <button id="open-sidebar-button" type="button"
        class="sm:hidden border-slate-300 border-r w-8 font-bold flex flex-col items-center justify-start gap-1 focus:underline">
        <div class="text-vertical mt-4">
          Passages
        </div>
        <svg aria-hidden="true" class="icon">
          <use href="/assets/icons.svg#angles-right" />
        </svg>
      </button>
      <div id="sidebar"
        class={
            "absolute bg-white z-10 h-full w-11/12 max-w-80 min-w-64 border-r border-slate-300 flex-shrink-0 sm:w-1/3 sm:block sm:max-w-96 sm:static",
            templ.KV("hidden", model.StartOpen)
        }
      >
        <div class="flex border-b border-slate-300 py-2 px-4">
          <a class="flex-grow flex items-center gap-1" href="/passages/new" hx-target="#main">
            <svg class="icon">
              <use href="/assets/icons.svg#plus"></use>
            </svg>
            Add Passage
          </a>
          <button id="close-sidebar-button" class="sm:hidden" title="Close">
            <svg class="icon" aria-hidden="true">
              <use href="/assets/icons.svg#angles-left"></use>
            </svg>
            <span class="sr-only">Close Sidebar</span>
          </button>
        </div>
        <ul id="passage-list">
            for _, passage := range model.Passages {
                @passageListItem(passage)
            }
        </ul>
      </div>
      <main id="main" class="flex-grow relative">
        switch page := model.Page.(type) {
            case AddPassagePageModel:
                @AddPassagePage(page)
            case EditPassagePageModel:
                @EditPassagePage(page)
            case ReviewPassagePageModel:
                @ReviewPassagePage(page)
        }
      </main>
    </div>
    <script type="text/javascript">
      {
        const openButton = document.querySelector('#open-sidebar-button')
        const closeButton = document.querySelector('#close-sidebar-button')
        const sidebar = document.querySelector('#sidebar')

        openButton.addEventListener('click', e => {
          sidebar.classList.remove('hidden')
        })
        closeButton.addEventListener('click', e => {
          sidebar.classList.add('hidden')
        })

        htmx.on('htmx:pushedIntoHistory', () => {
          sidebar.classList.add("hidden")
        })
      }
    </script>
}
